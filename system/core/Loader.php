<?phpclass Loader{    /*protected $registry;    public function __construct($registry){        $this->registry = $registry;    }*/    public function controller($path, $data = array()) {        $path = preg_replace('/[^a-zA-Z0-9_\/]/', '', (string)$path);        $contr_name = 'Controller';        $full_path = (explode('/', $path));        if(count($full_path) > 2) {            foreach ($full_path as $name) {                if($name === end($full_path))                    $method = $name;                else                    $contr_name .= ucfirst($name);            }        } else {            foreach ($full_path as $name) {                $contr_name .= ucfirst($name);            }            $method = "index";        }        require_once CONTROLLER_PATH . CURR_DIR . substr($path, 0, strrpos($path, '/')). ".php";        $controller = new $contr_name();        echo $controller->$method(array(&$data));    }    public function model($model) {        $model = preg_replace('/[^a-zA-Z0-9_\/]/', '', (string)$model);        require_once MODEL_PATH . CURR_DIR . "$model.php";        $class = 'Model';        foreach (explode('/', $model) as $value) $class .= ucfirst($value);        try{            return new $class;        } catch (Exception $e){            return $e;        }    }    public function view($path, $_ = array()) {        //$full_dir = VIEW_PATH . CURR_DIR . $path . ".phtml";        ob_start();        foreach($_ as $key=>$result){            $$key = $result;        }        require_once VIEW_PATH . CURR_DIR . $path . ".view";        return ob_get_clean();    }    public function library($lib) {        $lib = preg_replace('/[^a-zA-Z0-9_\/]/', '', (string)$lib);        require_once LIB_PATH . "$lib.php";    }    public function helper($helper) {        $helper = preg_replace('/[^a-zA-Z0-9_\/]/', '', (string)$helper);        require_once HELPER_PATH . "{$helper}_helper.php";    }}